/-
Copyright (c) 2024 Emilie Burgun. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Emilie Burgun
-/

import Mathlib.Topology.Basic
import Mathlib.Topology.Constructions
import Mathlib.Topology.ContinuousOn

/-!
# Topological spaces with no isolated points

A topological space has no isolated point if `ùìù p ‚äì ùìü {p}·∂ú ‚â† ‚ä•` for every point `p`.
-/

open Topology

/--
A topological space has no isolated point if `ùìù p ‚äì ùìü {p}·∂ú ‚â† ‚ä•` for every point `p`.
-/
@[deprecated]
class NoIsolatedPoints (Œ± : Type*) [TopologicalSpace Œ±] : Prop :=
  /-- The punctured neighborhood of every point is non-bot. -/
  not_isolated' : ‚àÄ p : Œ±, Filter.NeBot (ùìù[‚â†] p)

variable {Œ± Œ≤: Type*} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]

instance NoIsolatedPoints.not_isolated [NoIsolatedPoints Œ±] (p : Œ±): Filter.NeBot (ùìù[‚â†] p) :=
  NoIsolatedPoints.not_isolated' p

theorem nhdsWithin_punctured_prod_neBot_iff {p : Œ±} {q : Œ≤} : Filter.NeBot (ùìù[‚â†] (p, q)) ‚Üî
    Filter.NeBot (ùìù[‚â†] p) ‚à® Filter.NeBot (ùìù[‚â†] q) := by
  rw [‚Üê Set.singleton_prod_singleton, Set.compl_prod_eq_union, nhdsWithin_union,
    nhdsWithin_prod_eq, nhdsWithin_univ, nhdsWithin_prod_eq, nhdsWithin_univ, Filter.neBot_iff,
    ne_eq, sup_eq_bot_iff, Filter.prod_eq_bot, Filter.prod_eq_bot, not_and_or, not_or, not_or]
  constructor
  ¬∑ intro h
    cases h with
    | inl h => left; exact ‚ü®h.left‚ü©
    | inr h => right; exact ‚ü®h.right‚ü©
  ¬∑ intro h
    cases h with
    | inl h => left; exact ‚ü®h.ne, (nhds_neBot (x := q)).ne‚ü©
    | inr h => right; exact ‚ü®(nhds_neBot (x := p)).ne, h.ne‚ü©

variable (Œ± Œ≤) in
instance NoIsolatedPoints.prod_left [NoIsolatedPoints Œ±] : NoIsolatedPoints (Œ± √ó Œ≤) where
  not_isolated' := by
    intro ‚ü®p, q‚ü©
    rw [nhdsWithin_punctured_prod_neBot_iff]
    left
    exact NoIsolatedPoints.not_isolated p

variable (Œ± Œ≤) in
instance NoIsolatedPoints.prod_right [NoIsolatedPoints Œ≤] : NoIsolatedPoints (Œ± √ó Œ≤) where
  not_isolated' := by
    intro ‚ü®p, q‚ü©
    rw [nhdsWithin_punctured_prod_neBot_iff]
    right
    exact NoIsolatedPoints.not_isolated q
