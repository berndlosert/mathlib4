/-
Copyright (c) 2024 Emilie Burgun. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Emilie Burgun
-/

import Mathlib.Topology.Separation
import Mathlib.Topology.Algebra.Group.LocallyDense
import Mathlib.GroupTheory.GroupAction.FixedPoints
import Mathlib.Topology.Sets.RegularOpens

/-!
# Regular supports in Rubin's theorem

This module defines the notion of a regular support in the proof of Rubin's theorem.
The regular support of a group element `g` is the `interior` of the `closure` of the set
`(fixedBy Œ± g)·∂ú`.

## References

* [J. Belk, L. Elliott, F. Matucci, *A short proof of Rubin's theorem*][belk2023short]
-/

namespace Rubin

open Topology
open TopologicalSpace (RegularOpens)
open MulAction
open Pointwise

variable {G Œ± : Type*} [Group G] [MulAction G Œ±] [TopologicalSpace Œ±]

variable (Œ±) in
/--
The regular support of a group element `g` on the topology `Œ±` that the group is acting on is
the interior of the closure of the set of points moved by `g`.
-/
def RegularSupport (g : G) : RegularOpens Œ± := RegularOpens.fromSet (fixedBy Œ± g)·∂ú

variable (Œ±) in
lemma regularSupport_def (g : G) : RegularSupport Œ± g = RegularOpens.fromSet (fixedBy Œ± g)·∂ú := rfl

namespace RegularSupport

variable (Œ±) in
theorem subset_closure_fixedBy_compl (g : G) :
    (RegularSupport Œ± g : Set Œ±) ‚äÜ closure (fixedBy Œ± g)·∂ú := interior_subset

variable [T2Space Œ±] [ContinuousConstSMul G Œ±]

variable (Œ±) in
theorem fixedBy_compl_subset (g : G) : (fixedBy Œ± g)·∂ú ‚äÜ RegularSupport Œ± g :=
  RegularOpens.subset_fromSet_of_isOpen (isClosed_fixedBy Œ± g).isOpen_compl

theorem le_iff_fixedBy_compl_subset (g : G) (s : RegularOpens Œ±) :
    (fixedBy Œ± g)·∂ú ‚äÜ s ‚Üî RegularSupport Œ± g ‚â§ s := by
  nth_rw 2 [‚Üê RegularOpens.fromSet_coe s]
  constructor
  ¬∑ intro subset
    exact RegularOpens.fromSet_mono subset
  ¬∑ intro le
    apply subset_trans (fixedBy_compl_subset Œ± g)
    rw [‚Üê s.regularOpen]
    exact le

theorem le_iff_mem_fixingSubgroup_compl (g : G) (s : RegularOpens Œ±) :
    g ‚àà G‚Ä¢[(‚Üës : Set Œ±)·∂ú] ‚Üî RegularSupport Œ± g ‚â§ s := by
  rw [mem_fixingSubgroup_compl_iff_movedBy_subset]
  exact le_iff_fixedBy_compl_subset g s

variable (Œ±) in
theorem smul (g h : G) : h ‚Ä¢ RegularSupport Œ± g = RegularSupport Œ± (h * g * h‚Åª¬π) := by
  unfold RegularSupport
  rw [RegularOpens.smul_fromSet, Set.smul_set_compl, smul_fixedBy]

end RegularSupport

variable (G Œ±) in
def RegularSupportBasis :=
  { s : Set Œ± | ‚àÉ t : Set G, t.Finite ‚àß (s : Set Œ±) = ‚ãÇ g ‚àà t, RegularSupport Œ± g }

-- instance RegularSupportBasis.setLike : SetLike (RegularSupportBasis G Œ±) Œ± where
--   coe := fun b => b.val
--   coe_injective' := Subtype.val_injective

-- theorem RegularSupportBasis.exists_finite_generator (b : RegularSupportBasis G Œ±) :
--     ‚àÉ t : Set G, t.Finite ‚àß (b : Set Œ±) = ‚ãÇ g ‚àà t, RegularSupport Œ± g := b.prop

instance RegularSupportBasis.semiLatticeInf : SemilatticeInf (RegularSupportBasis G Œ±) where
  inf := fun b‚ÇÅ b‚ÇÇ => ‚ü®
    b‚ÇÅ.val ‚à© b‚ÇÇ.val,
    by
      let ‚ü®s‚ÇÅ, s‚ÇÅ_finite, b‚ÇÅ_eq‚ü© := b‚ÇÅ.prop
      let ‚ü®s‚ÇÇ, s‚ÇÇ_finite, b‚ÇÇ_eq‚ü© := b‚ÇÇ.prop
      refine ‚ü®s‚ÇÅ ‚à™ s‚ÇÇ, s‚ÇÅ_finite.union s‚ÇÇ_finite, ?iInf_eq‚ü©
      rw [b‚ÇÅ_eq, b‚ÇÇ_eq, Set.biInter_union]
  ‚ü©
  inf_le_left := fun b‚ÇÅ b‚ÇÇ => (inf_le_left : b‚ÇÅ.val ‚äì b‚ÇÇ.val ‚â§ b‚ÇÅ.val)
  inf_le_right := fun b‚ÇÅ b‚ÇÇ => (inf_le_right : b‚ÇÅ.val ‚äì b‚ÇÇ.val ‚â§ b‚ÇÇ.val)
  le_inf := fun b‚ÇÅ b‚ÇÇ b‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÉ => (le_inf h‚ÇÅ‚ÇÇ h‚ÇÅ‚ÇÉ : b‚ÇÅ.val ‚â§ b‚ÇÇ.val ‚äì b‚ÇÉ.val)

instance RegularSupportBasis.orderTop : OrderTop (RegularSupportBasis G Œ±) where
  top := ‚ü®
    ‚ä§,
    by
      use ‚àÖ
      simp
  ‚ü©
  le_top := fun b => (le_top : b.val ‚â§ ‚ä§)

instance RegularSupportBasis.orderBot : OrderBot (RegularSupportBasis G Œ±) where
  bot := ‚ü®
    ‚ä•,
    by
      use {1}
      simp [RegularSupport]
  ‚ü©
  bot_le := fun b => (bot_le : ‚ä• ‚â§ b.val)

theorem RegularSupportBasis.regularOpen (b : RegularSupportBasis G Œ±) :
    IsRegularOpen (b : Set Œ±) := by
  let ‚ü®s, s_finite, b_eq‚ü© := b.prop
  rw [b_eq]
  exact IsRegularOpen.biInter_of_finite s_finite fun g _ => RegularOpens.regularOpen _

variable (Œ±) in
/--
The element of the regular support basis constructed from the finite set `s`.
-/
def RegularSupportBasis.ofFinite (s : Set G) (s_finite : s.Finite) : RegularSupportBasis G Œ± :=
  ‚ü®‚ãÇ g ‚àà s, RegularSupport Œ± g, s, s_finite, rfl‚ü©

@[simp]
theorem RegularSupportBasis.coe_ofFinite {s : Set G} (s_finite : s.Finite) :
    (‚Üë(RegularSupportBasis.ofFinite Œ± s s_finite) : Set Œ±) = ‚ãÇ g ‚àà s, RegularSupport Œ± g := rfl

variable [LocallyCompactSpace Œ±] [T2Space Œ±] [NoIsolatedPoints Œ±]
variable [ContinuousConstSMul G Œ±] [LocallyDenseSMul G Œ±]

variable (G) in
/--
This corresponds to proposition 3.2 of [*A short proof of Rubin's theorem*][belk2023short].
-/
theorem exists_regularSupport_subset {s : Set Œ±} (s_open : IsOpen s) {p : Œ±} (p_in_s : p ‚àà s) :
    ‚àÉ g : G, p ‚àà RegularSupport Œ± g ‚àß ‚Üë(RegularSupport Œ± g) ‚äÜ s := by
  have s_in_nhds : s ‚àà ùìù p := IsOpen.mem_nhds s_open p_in_s
  let ‚ü®t', t'_in_nhds, t'_ss_s, t'_compact‚ü© := local_compact_nhds s_in_nhds

  let ‚ü®t, _, t_closed, t'_ss_int_t, t_ss_s‚ü© := exists_compact_closed_between t'_compact s_open
    t'_ss_s

  have p_in_int : p ‚àà interior t := t'_ss_int_t (mem_of_mem_nhds t'_in_nhds)
  let ‚ü®g, g_in_fixing, g_moves‚ü© := LocallyDenseSMul.moving_elem_in_fixingSubgroup_compl G
    isOpen_interior p_in_int

  refine ‚ü®g, RegularSupport.fixedBy_compl_subset _ _ g_moves, ?rsupp_subset‚ü©
  rw [mem_fixingSubgroup_compl_iff_movedBy_subset] at g_in_fixing
  rw [RegularSupport, RegularOpens.coe_fromSet, ‚Üê s_open.interior_eq]
  apply interior_mono
  apply subset_trans _ t_ss_s
  rw [‚Üê t_closed.closure_eq]
  exact closure_mono (subset_trans g_in_fixing interior_subset)

/--
In a locally compact, Hausdorff space `Œ±` with no isolated points, and a locally dense,
continuous group action, the sets of `RegularSupportBasis G Œ±` form a topological basis for `Œ±`.
-/
theorem RegularSupportBasis.isBasis :
    TopologicalSpace.IsTopologicalBasis (RegularSupportBasis G Œ±) := by
  apply TopologicalSpace.isTopologicalBasis_of_isOpen_of_nhds
  ¬∑ exact fun _ mem => (RegularSupportBasis.regularOpen ‚ü®_, mem‚ü©).isOpen
  ¬∑ intro a s a_in_s s_open
    let ‚ü®g, a_in_supp, supp_ss‚ü© := exists_regularSupport_subset G s_open a_in_s
    refine ‚ü®_, ‚ü®{g}, Set.finite_singleton g, rfl‚ü©, ?rest‚ü©
    simp only [Set.mem_singleton_iff, Set.iInter_iInter_eq_left, SetLike.mem_coe]
    exact ‚ü®a_in_supp, supp_ss‚ü©

end Rubin
