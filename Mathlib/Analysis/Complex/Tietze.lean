/-
Copyright (c) 2024 Jireh Loreaux. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jireh Loreaux
-/
import Mathlib.Analysis.Complex.Basic
import Mathlib.Data.IsROrC.Lemmas
import Mathlib.Topology.TietzeExtension
import Mathlib.Analysis.NormedSpace.HomeomorphBall
import Mathlib.Analysis.NormedSpace.IsROrC
/-!
# `Рёѓ` satisfies the Tietze extension theorem

We provide this result here in order to avoid pulling unnecessary imports into either of
`Topology.TietzeExtension` or `Analysis.Complex.Basic`.
-/

universe u uРѓЂ v w

-- this is not an instance because Lean cannot determine `­ЮЋю`.
theorem TietzeExtension.of_tvs (­ЮЋю : Type v) [NontriviallyNormedField ­ЮЋю] {E : Type w}
    [AddCommGroup E] [Module ­ЮЋю E] [TopologicalSpace E] [TopologicalAddGroup E] [ContinuousSMul ­ЮЋю E]
    [T2Space E] [FiniteDimensional ­ЮЋю E] [CompleteSpace ­ЮЋю] [TietzeExtension.{u, v} ­ЮЋю] :
    TietzeExtension.{u, w} E :=
  Basis.ofVectorSpace ­ЮЋю E |>.equivFun.toContinuousLinearEquiv.toHomeomorph |> .of_homeo

instance Complex.instTietzeExtension : TietzeExtension Рёѓ :=
  TietzeExtension.of_tvs РёЮ

instance IsROrC.instTietzeExtension {­ЮЋю : Type*} [IsROrC ­ЮЋю] : TietzeExtension ­ЮЋю :=
  TietzeExtension.of_tvs РёЮ

instance IsROrC.instTietzeExtensionTVS {­ЮЋю : Type v} [IsROrC ­ЮЋю] {E : Type w}
    [AddCommGroup E] [Module ­ЮЋю E] [TopologicalSpace E] [TopologicalAddGroup E]
    [ContinuousSMul ­ЮЋю E] [T2Space E] [FiniteDimensional ­ЮЋю E] :
    TietzeExtension.{u, w} E :=
  TietzeExtension.of_tvs ­ЮЋю

instance Set.instTietzeExtensionUnitBall {­ЮЋю : Type v} [IsROrC ­ЮЋю] {E : Type w}
    [NormedAddCommGroup E] [NormedSpace ­ЮЋю E] [FiniteDimensional ­ЮЋю E] :
    TietzeExtension.{u, w} (Metric.ball (0 : E) 1) :=
  have : NormedSpace РёЮ E := NormedSpace.restrictScalars РёЮ ­ЮЋю E
  .of_homeo Homeomorph.unitBall.symm

instance Set.instTietzeExtensionUnitClosedBall {­ЮЋю : Type v} [IsROrC ­ЮЋю] {E : Type w}
    [NormedAddCommGroup E] [NormedSpace ­ЮЋю E] [FiniteDimensional ­ЮЋю E] :
    TietzeExtension.{u, w} (Metric.closedBall (0 : E) 1) := by
  have : NormedSpace РёЮ E := NormedSpace.restrictScalars РёЮ ­ЮЋю E
  have : IsScalarTower РёЮ ­ЮЋю E := Real.isScalarTower
  -- I didn't find this retract in Mathlib.
  let g : E Рєњ E := fun x Рєд РђќxРђќРЂ╗┬╣ Рђб x
  classical
  suffices this : Continuous (piecewise (Metric.closedBall 0 1) id g) by
    refine .of_retract РЪеSubtype.val, by continuityРЪЕ РЪе_, this.codRestrict fun x Рєд ?_РЪЕ ?_
    ┬и by_cases hx : x Рѕѕ Metric.closedBall 0 1
      ┬и simpa [piecewise_eq_of_mem (hi := hx)] using hx
      ┬и simp only [piecewise_eq_of_not_mem (hi := hx), IsROrC.real_smul_eq_coe_smul (K := ­ЮЋю)]
        by_cases hx' : x = 0 <;> simp [hx']
    ┬и ext x
      simp [piecewise_eq_of_mem (hi := x.property)]
  refine continuous_piecewise (fun x hx Рєд ?_) continuousOn_id ?_
  ┬и replace hx : РђќxРђќ = 1 := by simpa [frontier_closedBall (0 : E) one_ne_zero] using hx
    simp [hx]
  ┬и refine continuousOn_id.norm.invРѓђ ?_ |>.smul continuousOn_id
    simp only [closure_compl, interior_closedBall (0 : E) one_ne_zero, mem_compl_iff,
      Metric.mem_ball, dist_zero_right, not_lt, id_eq, ne_eq, norm_eq_zero]
    exact fun x hx Рєд norm_pos_iff.mp <| one_pos.trans_le hx

def DilationEquiv.toHomeomorph {X Y : Type*} [PseudoEMetricSpace X] [PseudoEMetricSpace Y]
    (e : X РЅЃрхѕ Y) : X РЅЃРѓю Y where
  continuous_toFun := Dilation.toContinuous e
  continuous_invFun := Dilation.toContinuous e.symm
  __ := e.toEquiv

@[simp]
lemma DilationEquiv.coe_toHomeomorph {X Y : Type*} [PseudoEMetricSpace X] [PseudoEMetricSpace Y]
    {e : X РЅЃрхѕ Y} : РЄЉe.toHomeomorph = e :=
  rfl

@[simp]
lemma DilationEquiv.toHomeomorph_symm {X Y : Type*} [PseudoEMetricSpace X]
    [PseudoEMetricSpace Y] {e : X РЅЃрхѕ Y} : e.toHomeomorph.symm = e.symm.toHomeomorph :=
  rfl

open NNReal

@[simps]
def NormedSpace.dilationEquiv (­ЮЋю : Type*) {E : Type*} [IsROrC ­ЮЋю] [NormedAddCommGroup E]
    [NormedSpace ­ЮЋю E] (y : E) {r : РёЮ} (hr : 0 < r) :
    E РЅЃрхѕ E where
  toFun w := (РђќrРђќ : ­ЮЋю) Рђб w + y
  invFun w := (РђќrРђќРЂ╗┬╣ : ­ЮЋю) Рђб (w - y)
  left_inv w := by simp [smul_smul, inv_mul_cancel (show ((|r| : РёЮ) : ­ЮЋю) РЅа 0 by simpa using hr.ne')]
  right_inv w := by simp [smul_smul, mul_inv_cancel (show ((|r| : РёЮ) : ­ЮЋю) РЅа 0 by simpa using hr.ne')]
  edist_eq' := by
    lift r to РёЮРЅЦ0 using hr.le
    simp only [ne_eq, Real.norm_eq_abs, edist_add_right]
    refine РЪеr, by exact_mod_cast hr.ne', fun wРѓЂ wРѓЂ Рєд ?_РЪЕ
    simp only [NNReal.abs_eq, edist_eq_coe_nnnorm_sub, Рєљ smul_sub, sub_sub_sub_cancel_right,
      nnnorm_smul, ENNReal.coe_mul]
    norm_cast
    ext
    simp

def Homeomorph.subtype {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] {p : X Рєњ Prop}
    {q : Y Рєњ Prop} (e : X РЅЃРѓю Y) (he : Рѕђ x, p x Рєћ q (e x)) :
    {x // p x} РЅЃРѓю {y // q y} where
  toFun := Subtype.map e (he ┬и |>.mp)
  invFun := Subtype.map e.symm fun y hy Рєд he _ |>.mpr ((e.apply_symm_apply y).symm РќИ hy)
  left_inv x := by ext; simp
  right_inv y := by ext; simp
  continuous_toFun := by simp only; exact e.continuous.subtype_map _
  continuous_invFun := by simp only; exact e.symm.continuous.subtype_map _

def Homeomorph.sets {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y] {s : Set X}
    {t : Set Y} (e : X РЅЃРѓю Y) (he : s = e РЂ╗┬╣' t) :
    s РЅЃРѓю t :=
  Homeomorph.subtype e <| Set.ext_iff.mp he

theorem Metric.instTietzeExtensionBall {­ЮЋю : Type v} [IsROrC ­ЮЋю] {E : Type w}
    [NormedAddCommGroup E] [NormedSpace ­ЮЋю E] [FiniteDimensional ­ЮЋю E] {r : РёЮ} (hr : 0 < r) :
    TietzeExtension.{u, w} (Metric.ball (0 : E) r) :=
  have : NormedSpace РёЮ E := NormedSpace.restrictScalars РёЮ ­ЮЋю E
  .of_homeo <| show (Metric.ball (0 : E) r) РЅЃРѓю (Metric.ball (0 : E) 1) from
    PartialHomeomorph.unitBallBall (0 : E) r hr |>.toHomeomorphSourceTarget.symm

theorem Metric.instTietzeExtensionClosedBall (­ЮЋю : Type v) [IsROrC ­ЮЋю] {E : Type w}
    [NormedAddCommGroup E] [NormedSpace ­ЮЋю E] [FiniteDimensional ­ЮЋю E] (y : E) {r : РёЮ} (hr : 0 < r) :
    TietzeExtension.{u, w} (Metric.closedBall y r) :=
  .of_homeo <| by
    show (Metric.closedBall y r) РЅЃРѓю (Metric.closedBall (0 : E) 1)
    symm
    refine NormedSpace.dilationEquiv ­ЮЋю y hr |>.toHomeomorph.sets ?_
    ext x
    simp only [Metric.mem_closedBall, dist_zero_right, Set.mem_preimage,
      DilationEquiv.coe_toHomeomorph, NormedSpace.dilationEquiv_apply, Real.norm_eq_abs,
      dist_add_self_left, norm_smul]
    rw [IsROrC.norm_ofReal, abs_abs, abs_of_nonneg hr.le]
    exact (mul_le_iff_le_one_right hr).symm

instance Unique.instTietzeExtension {Y : Type v} [TopologicalSpace Y] [Unique Y] :
    TietzeExtension.{u, v} Y where
  exists_restrict_eq' _ _ f := РЪе.const _ default, by ext x; exact Subsingleton.elim _ _РЪЕ


-- why don't we have this instance?
instance {X : Type*} [PartialOrder X] (x : X) : Unique (Set.Icc x x) where
  default := РЪеx, Set.left_mem_Icc.mpr le_rflРЪЕ
  uniq y := Subtype.ext <| have h := Set.mem_Icc.mp y.property; le_antisymm h.2 h.1

theorem Set.instTietzeExtensionIcc {a b : РёЮ} (hab : a РЅц b) :
    TietzeExtension.{u, 0} (Icc a b) := by
  by_cases hab' : a = b
  ┬и exact .of_homeo <| .setCongr (show Icc a b = Icc b b by rw [hab'])
  ┬и replace hab := lt_of_le_of_ne hab hab'
    have := Metric.instTietzeExtensionClosedBall РёЮ ((a + b) / 2) (show 0 < (b - a) / 2 by linarith)
    exact .of_homeo <| .setCongr (Real.Icc_eq_closedBall a b)

variable {X : Type u} [TopologicalSpace X] [NormalSpace X] {s : Set X} (hs : IsClosed s)
variable (­ЮЋю : Type v) [IsROrC ­ЮЋю] [TietzeExtension.{u, v} ­ЮЋю]
variable {E : Type w} [NormedAddCommGroup E] [NormedSpace ­ЮЋю E] [FiniteDimensional ­ЮЋю E]

namespace BoundedContinuousFunction

/-- **Tietze extension theorem** for real-valued bounded continuous maps, a version with a closed
embedding and bundled composition. If `e : C(X, Y)` is a closed embedding of a topological space
into a normal topological space and `f : X РєњрхЄ РёЮ` is a bounded continuous function, then there exists
a bounded continuous function `g : Y РєњрхЄ РёЮ` of the same norm such that `g Рѕў e = f`. -/
theorem exists_norm_eq_restrict_eq (f : s РєњрхЄ E) :
    РѕЃ g : X РєњрхЄ E, РђќgРђќ = РђќfРђќ РѕД g.restrict s = f := by
  by_cases hf : РђќfРђќ = 0; ┬и exact РЪе0, by aesopРЪЕ
  have := Metric.instTietzeExtensionClosedBall.{u, v} ­ЮЋю (0 : E) (by aesop : 0 < РђќfРђќ)
  have hf' x : f x Рѕѕ Metric.closedBall 0 РђќfРђќ := by simpa using f.norm_coe_le_norm x
  obtain РЪеg, hg_mem, hgРЪЕ := (f : C(s, E)).exists_forall_mem_restrict_eq hs hf'
  simp only [Metric.mem_closedBall, dist_zero_right] at hg_mem
  let g' : X РєњрхЄ E := .ofNormedAddCommGroup g (map_continuous g) РђќfРђќ hg_mem
  refine РЪеg', ?_, by ext x; congrm($(hg) x)РЪЕ
  apply le_antisymm ((g'.norm_le <| by positivity).mpr hg_mem)
  refine (f.norm_le <| by positivity).mpr fun x Рєд ?_
  have hx : f x = g' x := by simpa using congr($(hg) x).symm
  rw [hx]
  exact g'.norm_le (norm_nonneg g') |>.mp le_rfl x

theorem exists_forall_mem_Icc_restrict_eq (f : s РєњрхЄ РёЮ) {a b : РёЮ}  (hf : Рѕђ x, f x Рѕѕ Set.Icc a b)
    (hle : a РЅц b) : РѕЃ g : X РєњрхЄ РёЮ, (Рѕђ x, g x Рѕѕ Set.Icc a b) РѕД g.restrict s = f := by
  have := Set.instTietzeExtensionIcc hle
  obtain РЪеg, hg_mem, hgРЪЕ := (f : C(s, РёЮ)).exists_forall_mem_restrict_eq hs hf
  let g' : X РєњрхЄ РёЮ := by
    refine .ofNormedAddCommGroup g (map_continuous g) (max |a| |b|) fun x Рєд ?_
    simp only [Set.mem_Icc] at hg_mem
    simp only [Real.norm_eq_abs]
    exact abs_le_max_abs_abs (hg_mem x).1 (hg_mem x).2
  exact РЪеg', hg_mem, by ext x; congrm($(hg) x)РЪЕ
